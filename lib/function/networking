#!/bin/bash

# general firmware
extra_firmware(){
ARIA2="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
echo ""
echo "Adding ${DEFAULT_MOTD} firmware ..."
sleep .50
mkdir -p /lib/firmware/brcm
cd ~
${ARIA2} https://github.com/armbian/firmware/archive/master.tar.gz
tar xf firmware-master.tar.gz
if [[ -f "firmware-master/README.md" ]]; then
	rm -f firmware-master/README.md
fi
cp -R firmware-master/* /lib/firmware
rm -fdr firmware-master firmware-master.tar.gz master.tar.gz
if [[ -f "/lib/firmware/brcm/brcmfmac4356-sdio.txt" ]]; then
	ln -s /lib/firmware/brcm/brcmfmac4356-sdio.txt /lib/firmware/brcm/brcmfmac4356-sdio.friendlyarm,nanopc-t4.txt
fi
if [[ -f "/lib/firmware/brcm/brcmfmac4356-sdio.bin" ]]; then
	ln -s /lib/firmware/brcm/brcmfmac4356-sdio.bin /lib/firmware/brcm/brcmfmac4356-sdio.friendlyarm,nanopc-t4.bin
fi
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
install -Dm644 UPDATE.mem /lib/firmware/renesas_usb_fw.mem
rm -f UPDATE.mem
if [[ "$BOARD" == "pinebookpro" ]]; then
	# wifi and bluetooth firmware
	wget -cq https://raw.githubusercontent.com/pyavitz/firmware/main/brcmfmac43456-sdio.txt
	wget -cq https://raw.githubusercontent.com/pyavitz/firmware/main/brcmfmac43456-sdio.bin
	wget -cq https://raw.githubusercontent.com/pyavitz/firmware/main/brcmfmac43456-sdio.clm_blob
	wget -cq https://raw.githubusercontent.com/pyavitz/firmware/main/BCM4345C5.hcd
	wget -cq https://raw.githubusercontent.com/pyavitz/firmware/main/BCM4345C0.hcd
	cp -f brcmfmac43456-sdio.txt brcmfmac43456-sdio.pine64,pinebook-pro.txt
	mv -f {brcmfmac43456-*,BCM4345C5.hcd,BCM4345C0.hcd} /lib/firmware/brcm/
fi
if [[ "$FAMILY" == "amlogic" ]]; then
	${ARIA2} https://github.com/LibreELEC/meson-firmware/archive/refs/heads/master.tar.gz
	tar xf meson-firmware-master.tar.gz
	cp -R meson-firmware-master/meson/* /lib/firmware/meson
	rm -fdr meson-firmware-master*
	mkdir -p /lib/firmware/ene-ub6250
	cd /lib/firmware/ene-ub6250
	${ARIA2} https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+/main/ene-ub6250/ms_init.bin
	${ARIA2} https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+/main/ene-ub6250/ms_rdwr.bin
	${ARIA2} https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+/main/ene-ub6250/msp_rdwr.bin
	${ARIA2} https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+/main/ene-ub6250/sd_init1.bin
	${ARIA2} https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+/main/ene-ub6250/sd_init2.bin
	${ARIA2} https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+/main/ene-ub6250/sd_rdwr.bin
	chown -R root:root /lib/firmware/ene-ub6250
	cd ~
fi
if [[ "$FAMILY_EXT" == "rk356x" || "$FAMILY_EXT" == "rk3588" ]]; then
	mkdir -p /lib/firmware/bnx2
	wget -cq https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware/+archive/refs/heads/main/bnx2.tar.gz -P /lib/firmware/bnx2
	if [[ -f "/lib/firmware/bnx2/bnx2.tar.gz" ]]; then
		tar xf /lib/firmware/bnx2/bnx2.tar.gz -C /lib/firmware/bnx2
		rm -f /lib/firmware/bnx2/bnx2.tar.gz
	fi
	if [[ "$BOARD" == "khadasedge2" ]]; then
		cd ~
		echo ""
		git clone -b kedge2 https://github.com/pyavitz/firmware.git
		cp -R firmware/* /lib/firmware
		rm -fdr firmware
	fi
fi
mkdir -p /lib/firmware/rtl_nic
wget -cq https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git/+archive/refs/heads/main/rtl_nic.tar.gz -P /lib/firmware/rtl_nic
if [[ -f "/lib/firmware/rtl_nic/rtl_nic.tar.gz" ]]; then
	tar xf /lib/firmware/rtl_nic/rtl_nic.tar.gz -C /lib/firmware/rtl_nic
	rm -f /lib/firmware/rtl_nic/rtl_nic.tar.gz
fi
if [[ "$FAMILY_EXT" == "bananapi" || "$BOARD" == "tinker" || "$BOARD" == "x96air" ]]; then
	cd ~
	echo ""
	git clone -b realtek https://github.com/pyavitz/firmware.git
	cp -R firmware/* /lib/firmware
	rm -fdr firmware
fi
if [[ "$BOARD" == "indiedroid-nova" ]]; then
	cd ~
	echo ""
	#echo "Installing bluetooth support ..."
	git clone https://github.com/stvhay/rkwifibt
	# build the hci driver
	cd rkwifibt
	make -C realtek/rtk_hciattach
	# Install the firmware and utility
	mkdir -p /lib/firmware/rtl_bt
	cp -fr realtek/RTL8821CS/* /lib/firmware/rtl_bt/
	cp -f realtek/rtk_hciattach/rtk_hciattach /usr/bin/
	cp -f bt_load_rtk_firmware                /usr/bin/
	chmod +x /usr/bin/{rtk_hciattach,bt_load_rtk_firmware}
	echo hci_uart >> /etc/modules
	cd ~
	rm -fdr rkwifibt
fi
echo ""
}

# regulatory db
wireless_regdb(){
echo ""
echo -e "Adding regulatory db ..."
if [[ "$DISTRO" == "ubuntu" ]]; then
	echo 'KERNEL=="regulatory*", ACTION=="change", SUBSYSTEM=="platform", RUN+="/sbin/crda"' > /etc/udev/rules.d/60-regdb.rules
fi
git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/sforshee/wireless-regdb
sleep 1s
cd wireless-regdb
cp -f regulatory.db /lib/firmware/regulatory.db
cp -f regulatory.db.p7s /lib/firmware/regulatory.db.p7s
cd ~
rm -fdr wireless-regdb
}

# wireless conf files
realtek_conf(){
mkdir -p /etc/modprobe.d/
mkdir -p /usr/lib/NetworkManager/conf.d/
echo "options 8723bs rtw_power_mgnt=0 rtw_enusbss=0 rtw_switch_usb_mode=1" > /etc/modprobe.d/8723bs.conf
echo "options 8723ds rtw_power_mgnt=0 rtw_enusbss=0 rtw_switch_usb_mode=1" > /etc/modprobe.d/8723ds.conf
echo "options 8821cu rtw_power_mgnt=0 rtw_enusbss=0 rtw_switch_usb_mode=1" > /etc/modprobe.d/8821cu.conf
echo "options 88x2cs rtw_power_mgnt=0 rtw_enusbss=0 rtw_switch_usb_mode=1" > /etc/modprobe.d/88x2cs.conf
echo "options 88XXau rtw_power_mgnt=0 rtw_enusbss=0 rtw_switch_usb_mode=1" > /etc/modprobe.d/88XXau.conf

tee /usr/lib/NetworkManager/conf.d/rtl88x2bu.conf <<EOF
# Certain drivers are known not to support changing the MAC address.
# Disable touching the MAC address on such devices.

[device-rtl88x2bu]
match-device=driver:rtl88x2bu
wifi.scan-rand-mac-address=no
wifi.cloned-mac-address=preserve
ethernet.cloned-mac-address=preserve
EOF

tee /usr/lib/NetworkManager/conf.d/rtl8821cu.conf <<EOF
# Certain drivers are known not to support changing the MAC address.
# Disable touching the MAC address on such devices.

[device-rtl8821cu]
match-device=driver:rtl8821cu
wifi.scan-rand-mac-address=no
wifi.cloned-mac-address=preserve
ethernet.cloned-mac-address=preserve
EOF

chown root:root /etc/modprobe.d/{8723bs.conf,8723ds.conf,8821cu.conf,88XXau.conf}
chown root:root /usr/lib/NetworkManager/conf.d/{rtl88x2bu.conf,rtl8821cu.conf}
}

router_udev_rules(){
mkdir -p /etc/udev/rules.d
if [[ "$BOARD" == "nanopir4s" || "$BOARD" == "nanopir4se" || "$BOARD" == "nanopir5c" ]]; then
	echo 'SUBSYSTEM=="leds", KERNEL=="green:wan", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="eth1", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"' > /etc/udev/rules.d/10-nanopi-led.rules
	echo 'SUBSYSTEM=="leds", KERNEL=="green:lan", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="eth0", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"' >> /etc/udev/rules.d/10-nanopi-led.rules
fi
if [[ "$BOARD" == "nanopir5s" ]]; then
	echo 'SUBSYSTEM=="leds", KERNEL=="green:wan", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="eth2", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"' > /etc/udev/rules.d/10-nanopi-led.rules
	echo 'SUBSYSTEM=="leds", KERNEL=="green:lan1", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="eth0", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"' >> /etc/udev/rules.d/10-nanopi-led.rules
	echo 'SUBSYSTEM=="leds", KERNEL=="green:lan2", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="eth1", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"' >> /etc/udev/rules.d/10-nanopi-led.rules
fi
}

router_ifupdown(){
if [[ "$BOARD" == "orangepir1" || "$BOARD" == "nanopir4s" || "$BOARD" == "nanopir4se" || "$BOARD" == "nanopir5c" || "$BOARD" == "radxae25" ]]; then
	if [[ -f "/etc/network/interfaces" ]]; then
		sed -i 's/#allow-hotplug eth1/allow-hotplug eth1/g' /etc/network/interfaces
		sed -i 's/#iface eth1 inet dhcp/iface eth1 inet dhcp/g' /etc/network/interfaces
	fi
fi
if [[ "$BOARD" == "nanopir5s" ]]; then
	if [[ -f "/etc/network/interfaces" ]]; then
		sed -i 's/#allow-hotplug eth1/allow-hotplug eth1/g' /etc/network/interfaces
		sed -i 's/#iface eth1 inet dhcp/iface eth1 inet dhcp/g' /etc/network/interfaces
		sed -i 's/#allow-hotplug eth2/allow-hotplug eth2/g' /etc/network/interfaces
		sed -i 's/#iface eth2 inet dhcp/iface eth2 inet dhcp/g' /etc/network/interfaces
	fi
fi
}

ifupdown-setup(){
rm -f /etc/network/interfaces
if [[ "$DISTRO" == "devuan" ]]; then
	if [[ -e "/etc/network/if-up.d/00check-network-cable" ]]; then
		ln -sr /etc/network/if-up.d/00check-network-cable /etc/network/if-pre-up.d/00check-network-cable
	fi
	sed -i 's/#CONFIGURE_INTERFACES=yes/CONFIGURE_INTERFACES=yes/g' /etc/default/networking
	sed -i 's/#WAIT_ONLINE_METHOD=ifup/WAIT_ONLINE_METHOD=ifup/g' /etc/default/networking
	sed -i 's/#WAIT_ONLINE_TIMEOUT=300/WAIT_ONLINE_TIMEOUT=10/g' /etc/default/networking
	if [ -f /etc/default/network-test ]; then
		sed -i 's/DO_ARPING=${DO_ARPING:-yes}/DO_ARPING=${DO_ARPING:-no}/g' /etc/default/network-test
		sed -i 's/DO_SYSLOG=${DO_SYSLOG:-yes}/DO_SYSLOG=${DO_SYSLOG:-no}/g' /etc/default/network-test
	fi
fi
if [[ "$DISTRO_VERSION" == "jammy" || "$DISTRO_VERSION" == "kinetic" || "$DISTRO_VERSION" == "lunar" ]]; then
	# /etc/network/if-down.d/resolved: 12: mystatedir: not found
	# /etc/network/if-up.d/resolved: 12: mystatedir: not found
	if [[ -e "/etc/network/if-down.d/resolved" ]]; then
		sed -i 's/mystatedir statedir ifindex interface/#mystatedir statedir ifindex interface/g' /etc/network/if-down.d/resolved
		sed -i 's/return/exit 0/g' /etc/network/if-down.d/resolved
	fi
	if [[ -e "/etc/network/if-up.d/resolved" ]]; then
		sed -i 's/mystatedir statedir ifindex interface/#mystatedir statedir ifindex interface/g' /etc/network/if-up.d/resolved
		sed -i 's/return/exit 0/g' /etc/network/if-up.d/resolved
	fi
fi

# blacklist old rtl8188eu wireless module
mkdir -p /etc/modprobe.d
if [ $RTL8188EU -eq 1 ]; then
	echo "blacklist r8188eu" > /etc/modprobe.d/50-8188eu.conf
	chown root:root /etc/modprobe.d/50-8188eu.conf
	if [ -f /lib/firmware/rtlwifi/rtl8188eufw.bin ]; then
		:;
	else
		mkdir -p /lib/firmware/rtlwifi
		wget -cq https://github.com/armbian/firmware/raw/master/rtlwifi/rtl8188eufw.bin -P /lib/firmware/rtlwifi/
	fi
fi

# ifupdown interfaces and wpa_supplicant files
tee /etc/network/interfaces <<EOF
# Interfaces
source /etc/network/interfaces.d/*

# Loopback network interface
auto lo
iface lo inet loopback

# Ethernet
allow-hotplug eth0
iface eth0 inet dhcp
	#address 10.0.0.10
	#netmask 255.255.255.0
	#gateway 10.0.0.1
	#dns-nameservers 8.8.8.8 8.8.4.4
	
#allow-hotplug eth1
#iface eth1 inet dhcp
	#address 10.0.0.10
	#netmask 255.255.255.0
	#gateway 10.0.0.1
	#dns-nameservers 8.8.8.8 8.8.4.4

#allow-hotplug eth2
#iface eth2 inet dhcp
	#address 10.0.0.10
	#netmask 255.255.255.0
	#gateway 10.0.0.1
	#dns-nameservers 8.8.8.8 8.8.4.4

# Mobile tether
#allow-hotplug usb0
#iface usb0 inet dhcp

# Wireless
allow-hotplug wlan0
iface wlan0 inet dhcp
	wireless-power off
	#address 10.0.0.10
	#netmask 255.255.255.0
	#gateway 10.0.0.1
	#dns-nameservers 8.8.8.8 8.8.4.4
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
EOF

tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	ssid="mywifissid"
	scan_ssid=1
	key_mgmt=WPA-PSK
	psk="wifipasskey"
}
EOF
}

networkmanager-setup(){
if [ -f /etc/network/interfaces ]; then
	rm -f /etc/network/interfaces
fi
tee /etc/network/interfaces <<EOF
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback
EOF
echo "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev" > /etc/wpa_supplicant/wpa_supplicant.conf
chown root:root /etc/network/interfaces
chown root:root /etc/wpa_supplicant/wpa_supplicant.conf
if [ -f /usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf ]; then
	rm -f /usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf
fi
if [ -f /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf ]; then
	sed -i 's/wifi.powersave = 3/wifi.powersave = 2/g' /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
else
	echo "[connection]" > /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
	echo "wifi.powersave = 2" >> /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
fi
}

ifupdown-credentials(){
if [ -f /root/ifupdown.credentials ]; then
	CURRENT_HOSTNAME=`cat /etc/hostname | sed -n '1p'`
	mv -f /root/ifupdown.credentials /usr/local/bin/credentials
	chmod +x /usr/local/bin/credentials
	chown root:root /usr/local/bin/credentials
	rm -f /root/networkmanager.credentials
	echo "# activate service" > /boot/credentials.txt
	echo 'ENABLE="false"' >> /boot/credentials.txt
	echo "" >> /boot/credentials.txt
	echo "# input wifi credentials" >> /boot/credentials.txt
	echo 'SSID=""' >> /boot/credentials.txt
	echo 'PASSKEY=""' >> /boot/credentials.txt
	echo 'COUNTRYCODE=""' >> /boot/credentials.txt
	echo "# set static ip address" >> /boot/credentials.txt
	echo 'MANUAL="false"' >> /boot/credentials.txt
	echo 'IPADDR=""' >> /boot/credentials.txt
	echo 'NETMASK=""' >> /boot/credentials.txt
	echo 'GATEWAY=""' >> /boot/credentials.txt
	echo 'NAMESERVERS=""' >> /boot/credentials.txt
	echo "" >> /boot/credentials.txt
	echo "# change hostname" >> /boot/credentials.txt
	echo 'CHANGE="false"' >> /boot/credentials.txt
	echo HOSTNAME='"'$CURRENT_HOSTNAME'"' >> /boot/credentials.txt
fi
}

networkmanager-credentials(){
if [ -f /root/networkmanager.credentials ]; then
	CURRENT_HOSTNAME=`cat /etc/hostname | sed -n '1p'`
	mv -f /root/networkmanager.credentials /usr/local/bin/credentials
	chmod +x /usr/local/bin/credentials
	chown root:root /usr/local/bin/credentials
	rm -f /root/ifupdown.credentials
	echo "# activate service" > /boot/credentials.txt
	echo 'ENABLE="false"' >> /boot/credentials.txt
	echo "" >> /boot/credentials.txt
	echo "# input wifi credentials" >> /boot/credentials.txt
	echo 'SSID=""' >> /boot/credentials.txt
	echo 'PASSKEY=""' >> /boot/credentials.txt
	echo 'COUNTRYCODE=""' >> /boot/credentials.txt
	echo "# set static ip address" >> /boot/credentials.txt
	echo 'MANUAL="false"' >> /boot/credentials.txt
	echo 'IPADDR=""' >> /boot/credentials.txt
	echo 'GATEWAY=""' >> /boot/credentials.txt
	echo 'DNS=""' >> /boot/credentials.txt
	echo "" >> /boot/credentials.txt
	echo "# change hostname" >> /boot/credentials.txt
	echo 'CHANGE="false"' >> /boot/credentials.txt
	echo HOSTNAME='"'$CURRENT_HOSTNAME'"' >> /boot/credentials.txt
fi
}
